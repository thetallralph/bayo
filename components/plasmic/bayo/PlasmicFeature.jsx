// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b1W5dJMGgkpaNQ8tnw9w16
// Component: Fa0q6o_R7J
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_bayo.module.css"; // plasmic-import: b1W5dJMGgkpaNQ8tnw9w16/projectcss
import sty from "./PlasmicFeature.module.css"; // plasmic-import: Fa0q6o_R7J/css

export const PlasmicFeature__VariantProps = new Array();

export const PlasmicFeature__ArgProps = new Array("children", "slot");

function PlasmicFeature__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__eW5Di)}>
        {p.renderPlasmicSlot({
          defaultContents: "No tutorials, No learning curve. No stress. ",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__p0Hv)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "We really mean it! If you like to work absolutely hard, then Bayo isnâ€™t for you. It was built to be intuitive and really easy to use ",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeature__ArgProps,
          internalVariantPropNames: PlasmicFeature__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeature";
  } else {
    func.displayName = `PlasmicFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicFeature = Object.assign(
  // Top-level PlasmicFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFeature
    internalVariantProps: PlasmicFeature__VariantProps,
    internalArgProps: PlasmicFeature__ArgProps
  }
);

export default PlasmicFeature;
/* prettier-ignore-end */
